-----BEGIN PGP ARMORED FILE-----
Comment: Use "gpg --dearmor" for unpacking

CAESQEw2E94vrbXdlDfMQPMZQsgttY+FjZEas55nPVT5M65nKwtgLNNHwoR4ae1u
1K+gphcosWAsReva/2GMt71Atkk=
=Trrj
-----END PGP ARMORED FILE-----


    swarm.dial("/dnsaddr/french.braidpool.net/udp/8888/quic-v1/p2p/12D3KooWCXH2BiENJ7NkFUBSavd8Ed4ZSYKNdiFnYP5abSo36rGL".parse::<Multiaddr>().unwrap()).unwrap();


#![allow(unused)]

use std::{
    collections::hash_map::DefaultHasher,
    env,
    error::Error,
    hash::{Hash, Hasher},
    time::Duration,
};

use futures::stream::StreamExt;
use libp2p::{
    Multiaddr, StreamProtocol,
    core::transport::ListenerId,
    kad::{Mode, QueryResult, store::MemoryStore},
};
use libp2p::{
    PeerId, dns, gossipsub, identify, identity, kad, mdns, noise,
    swarm::{NetworkBehaviour, SwarmEvent},
    tcp, yamux,
};
use tokio::{io, io::AsyncBufReadExt, select};
use tracing_subscriber::EnvFilter;

// We create a custom network behaviour that combines Gossipsub and Mdns.
#[derive(NetworkBehaviour)]
struct MyBehaviour {
    gossipsub: gossipsub::Behaviour,
    // mdns: mdns::tokio::Behaviour,
    kad: kad::Behaviour<MemoryStore>,
    identify: identify::Behaviour,
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn Error>> {
    const KADPROTOCOLNAME: StreamProtocol = StreamProtocol::new("/braidpool/kad/1.0.0");
    const IDENTIFYPROTOCOLNAME: StreamProtocol = StreamProtocol::new("/braidpool/identify/1.0.0");
    let dns_link = "/dns4/french.braidpool.net/udp/8888/quic-v1";
    let _ = tracing_subscriber::fmt()
        .with_env_filter(EnvFilter::from_default_env())
        .try_init();
    let mut swarm: libp2p::Swarm<MyBehaviour> = libp2p::SwarmBuilder::with_new_identity()
        .with_tokio()
        // .with_other_transport(constructor)
        // .with_tcp(
        //     tcp::Config::default(),
        //     noise::Config::new,
        //     yamux::Config::default,
        // )?
        .with_quic()
        .with_dns()
        .unwrap()
        .with_behaviour(|key| {
            // To content-address message, we can take the hash of message and use it as an ID.
            let message_id_fn = |message: &gossipsub::Message| {
                let mut s = DefaultHasher::new();
                message.data.hash(&mut s);
                gossipsub::MessageId::from(s.finish().to_string())
            };

            // // Set a custom gossipsub configuration
            let gossipsub_config = gossipsub::ConfigBuilder::default()
                .heartbeat_interval(Duration::from_secs(10)) // This is set to aid debugging by not cluttering the log space
                .validation_mode(gossipsub::ValidationMode::Strict) // This sets the kind of message validation. The default is Strict (enforce message
                // signing)
                .message_id_fn(message_id_fn) // content-address messages. No two messages of the same content will be propagated.
                .build()
                .map_err(io::Error::other)?; // Temporary hack because `build` does not return a proper `std::error::Error`.

            // build a gossipsub network behaviour
            let gossipsub = gossipsub::Behaviour::new(
                gossipsub::MessageAuthenticity::Signed(key.clone()),
                gossipsub_config,
            )?;
            // //custom mdns or multicast dns
            // let mdns =
            //     mdns::tokio::Behaviour::new(mdns::Config::default(), key.public().to_peer_id())?;
            //key pair generation for peer id and configuration
            //initializing the store for kademlia based DHT
            let store = MemoryStore::new(key.public().to_peer_id());
            //custom kademlia protocol
            let mut kad_config = kad::Config::new(StreamProtocol::new("/braidpool/kad/1.0.0"));
            kad_config.set_query_timeout(tokio::time::Duration::from_secs(60));
            //custom kad configuration
            let kademlia_behaviour =
                kad::Behaviour::with_config(key.public().to_peer_id(), store, kad_config);
            let protocol_names = kademlia_behaviour.protocol_names();
            for protocol_name in protocol_names {
                println!("protocol names are - : {:?}", protocol_name.to_string());
            }

            //identify protocol configuration
            let identify_config =
                identify::Config::new("/braidpool/identify/1.0.0".to_string(), key.public());
            let identify = identify::Behaviour::new(identify_config);
            //custom network behaviour stack from libp2p
            Ok(MyBehaviour {
                gossipsub,
                // mdns,
                kad: kademlia_behaviour,
                identify,
            })
        })?
        .build();
    //creating a test topic subscribing to the current test topic
    let current_test_topic = gossipsub::IdentTopic::new("test_topic");
    swarm
        .behaviour_mut()
        .gossipsub
        .subscribe(&current_test_topic)
        .unwrap();
    //User input message
    swarm.dial("/dnsaddr/french.braidpool.net/udp/8888/quic-v1/p2p/12D3KooWCXH2BiENJ7NkFUBSavd8Ed4ZSYKNdiFnYP5abSo36rGL".parse::<Multiaddr>().unwrap()).unwrap();
    // swarm.dial("dnsaddr=/dnsaddr/sjc-1.bootstrap.libp2p.io/tcp/4001/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN".parse::<Multiaddr>().unwrap()).unwrap();
    //     const BOOTNODES: [&str; 1] = [
    //         "12D3KooWCXH2BiENJ7NkFUBSavd8Ed4ZSYKNdiFnYP5abSo36rGL"
    // ];
    // for peer in &BOOTNODES {
    //     swarm
    //         .behaviour_mut().kad
    //         .add_address(&peer.parse()?, "/dnsaddr/french.braidpool.net".parse()?);
    // }
    let mut stdin = io::BufReader::new(io::stdin()).lines();
    // while let Some(line) = stdin.next_line().await? {
    //     println!("length = {} and string is {:?}", line.len(),line);
    // }
    // let mut args = env::args().skip(1);
    // if let (Some(peer_id_str), Some(addr_str)) = (args.next(), args.next()) {
    //     //current node being listened onto the quic-v1 defauly port with universal address for a peer node
    //     swarm
    //         .listen_on("/ip4/0.0.0.0/udp/0/quic-v1".parse().unwrap())
    //         .unwrap();
    //     println!(
    //         "Current peerID for the peer node is {:?}",
    //         swarm.local_peer_id()
    //     );
    //     // Parse the peer ID and address
    //     let peer_id: PeerId = peer_id_str.parse()?;
    //     let addr: Multiaddr = addr_str.parse()?;
    //     let addr_reference = addr.clone();
    //     let boot_nodes: [&PeerId; 1] = [&peer_id];
    //     //Adding the boot nodes for kademlia based DHT discoveries .
    //     for peer in &boot_nodes {
    //         swarm
    //             .behaviour_mut()
    //             .kad
    //             .add_address(&peer, addr_reference.clone());
    //     }
    //     swarm.dial(addr_reference)?;
    //     println!("Dialed bootNode")
    // } else {
    //     //binding seed node to :8888 for the bootnode
    //     swarm
    //         .listen_on("/ip4/0.0.0.0/udp/8888/quic-v1".parse().unwrap())
    //         .unwrap();
    //     println!(
    //         "Current peerID for the peer node is {:?}",
    //         swarm.local_peer_id()
    //     );
    // }
    println!("CURRENT PEER ID {:?}", swarm.local_peer_id());
    swarm.behaviour_mut().kad.set_mode(Some(Mode::Server));
    loop {
        select! {

            Ok(Some(line)) = stdin.next_line() => {
                if let Err(e) = swarm
                    .behaviour_mut().gossipsub
                    .publish(current_test_topic.clone(), line.as_bytes()) {
                    println!("Publish error: {e:?}");
                }
            }
          event = swarm.select_next_some() => match event {
            SwarmEvent::ConnectionEstablished { peer_id, connection_id, endpoint, num_established, concurrent_dial_errors, established_in }=>{
                println!("{:?} {:?}",peer_id,connection_id);
            },
            SwarmEvent::NewListenAddr { address, listener_id } => {
                println!("Local node is listening on {address}");
            }
            SwarmEvent::Behaviour(MyBehaviourEvent::Kad(kad::Event::OutboundQueryProgressed { id, result, stats, step }))=>{
                match result {
                    QueryResult::GetClosestPeers(Ok(ok)) => {
                        println!("Got closest peers: {:?}", ok.peers);
                    }
                    QueryResult::GetClosestPeers(Err(err)) => {
                        println!("Failed to get closest peers: {err}");
                    }
                    _ => println!("Other query result: {:?}", result),
                }
            },
            SwarmEvent::Behaviour(MyBehaviourEvent::Kad(kad::Event::RoutingUpdated {
                peer,
                is_new_peer,
                addresses,
                bucket_range,
                old_peer,
            })) => {
                println!(
                    "Routing updated for peer: {peer}, new: {is_new_peer}, addresses: {:?}, bucket: {:?}, old_peer: {:?}",
                    addresses, bucket_range, old_peer
                );
            },
            SwarmEvent::Behaviour(MyBehaviourEvent::Identify(identify::Event::Sent { peer_id,..})) => {
                println!("Sent identify info to {peer_id:?}");
            },
            SwarmEvent::Behaviour(MyBehaviourEvent::Identify(identify::Event::Received {
                peer_id,connection_id,info
            })) => {
                println!("INFO RECIEVED {:?}",info);
                println!("{:?} is the current PROTOCOL_NAME for kad",KADPROTOCOLNAME);
                println!("protocols -- {:?}",info.protocols);
                if info.protocols
                    .iter()
                    .any(|p| *p == KADPROTOCOLNAME)
                {
                    for addr in info.listen_addrs {
                        println!("received addr {addr} through identify");
                        swarm.behaviour_mut().kad.add_address(&peer_id, addr);
                    }
                } else {
                    println!("something funky happened, investigate it");
                }
            }
              SwarmEvent::Behaviour(MyBehaviourEvent::Gossipsub(gossipsub::Event::Message {
                  propagation_source: peer_id,
                  message_id: id,
                  message,
              })) => println!(
                      "Got message: '{}' with id: {id} from peer: {peer_id}",
                      String::from_utf8_lossy(&message.data),
                  ),
              SwarmEvent::NewListenAddr { address, .. } => {
                  println!("Local node is listening on {address}");
                  let s = address;
              }
              _ => {println!("{:?}", event)},
          }
        }
    }
    Ok(())
}
